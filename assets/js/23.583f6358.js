(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{569:function(t,e,r){"use strict";r.r(e);var s=r(5),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("div",{staticClass:"custom-block tip"},[r("p",[t._v("HTTP（hypertext transport protocol）")])]),t._v(" "),r("h2",{attrs:{id:"概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),r("blockquote",[r("p",[t._v("HTTP（hypertext transport protocol）协议；中文叫 超文本传输协议")])]),t._v(" "),r("p",[t._v("是一种基于TCP/IP的应用层通信协议")]),t._v(" "),r("p",[t._v("这个协议详细规定了 "),r("code",[t._v("浏览器")]),t._v(" 和 万维网 "),r("code",[t._v("服务器")]),t._v(" 之间互相通信的规则")]),t._v(" "),r("p",[t._v("协议中主要规定了两个方面的内容:")]),t._v(" "),r("ul",[r("li",[t._v("客户端：用来向服务器发送数据，可以被称之为 请求报文")]),t._v(" "),r("li",[t._v("服务端：向客户端返回数据，可以被称之为 响应报文")])]),t._v(" "),r("blockquote",[r("p",[t._v("报文：可以简单理解为就是一堆字符串")])]),t._v(" "),r("h2",{attrs:{id:"请求报文的组成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#请求报文的组成"}},[t._v("#")]),t._v(" 请求报文的组成")]),t._v(" "),r("ul",[r("li",[t._v("请求行")]),t._v(" "),r("li",[t._v("请求头")]),t._v(" "),r("li",[t._v("空行")]),t._v(" "),r("li",[t._v("请求体")])]),t._v(" "),r("h2",{attrs:{id:"http-的请求行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-的请求行"}},[t._v("#")]),t._v(" "),r("strong",[t._v("HTTP")]),t._v(" 的请求行")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("请求方法（get、post、put、delete等）")])]),t._v(" "),r("li",[r("p",[t._v("请求 URL（统一资源定位器）")]),t._v(" "),r("p",[t._v("例如："),r("a",{attrs:{href:"https://gitee.com/link?target=http%3A%2F%2Fwww.baidu.com%2Findex.html%3Fa%3D100%26b%3D200%23logo",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.baidu.com/index.html?a=100&b=200#logo"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("http:          协议 (https、ftp、ssh等)")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://gitee.com/link?target=http%3A%2F%2Fwww.baidu.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("www.baidu.com"),r("OutboundLink")],1),t._v("  域名")]),t._v(" "),r("li",[t._v("80             端口号")]),t._v(" "),r("li",[t._v("/index.html     路径")]),t._v(" "),r("li",[t._v("a=100&b=200     查询字符串")]),t._v(" "),r("li",[t._v("#logo           哈希 (锚点链接)")])])]),t._v(" "),r("li",[r("p",[t._v("HTTP协议版本号")])])]),t._v(" "),r("h2",{attrs:{id:"http-请求头"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-请求头"}},[t._v("#")]),t._v(" HTTP 请求头")]),t._v(" "),r("p",[t._v("格式：『头名：头值』")]),t._v(" "),r("p",[t._v("常见的请求头有：")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("请求头")]),t._v(" "),r("th",[t._v("解释")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("Host")]),t._v(" "),r("td",[t._v("主机名")])]),t._v(" "),r("tr",[r("td",[t._v("Connection")]),t._v(" "),r("td",[t._v("连接的设置 keep-alive（保持连接）；close（关闭连接）")])]),t._v(" "),r("tr",[r("td",[t._v("Cache-Control")]),t._v(" "),r("td",[t._v("缓存控制 max-age = 0 （没有缓存）")])]),t._v(" "),r("tr",[r("td",[t._v("Upgrade-Insecure-Requests")]),t._v(" "),r("td",[t._v("将网页中的http请求转化为 https 请求（很少用）老网站升级")])]),t._v(" "),r("tr",[r("td",[t._v("User-Agent")]),t._v(" "),r("td",[t._v("用户代理，客户端字符串标识，服务器可以通过这个标识来识别这个请求来自哪个客户端 ，一般在PC端和手机端的区分")])]),t._v(" "),r("tr",[r("td",[t._v("Accept")]),t._v(" "),r("td",[t._v("设置浏览器接收的数据类型")])]),t._v(" "),r("tr",[r("td",[t._v("Accept-Encoding")]),t._v(" "),r("td",[t._v("设置接收的压缩方式")])]),t._v(" "),r("tr",[r("td",[t._v("Accept-Language")]),t._v(" "),r("td",[t._v("设置接收的语言 q=0.7 为喜好系数，满分为1")])]),t._v(" "),r("tr",[r("td",[t._v("Cookie")]),t._v(" "),r("td",[t._v("后面单独讲")])])])]),t._v(" "),r("h2",{attrs:{id:"http-的请求体"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-的请求体"}},[t._v("#")]),t._v(" HTTP 的请求体")]),t._v(" "),r("p",[t._v("请求体内容的格式是非常灵活的，")]),t._v(" "),r("p",[t._v("（可以是空）==> GET请求，")]),t._v(" "),r("p",[t._v("（也可以是字符串，还可以是JSON）===> POST请求")]),t._v(" "),r("p",[t._v("例如：")]),t._v(" "),r("ul",[r("li",[t._v("字符串：keywords=手机&price=2000")]),t._v(" "),r("li",[t._v('JSON：{"keywords":"手机","price":2000}')])]),t._v(" "),r("h2",{attrs:{id:"响应报文的组成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#响应报文的组成"}},[t._v("#")]),t._v(" 响应报文的组成")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("响应行:  "),r("code",[t._v("HTTP/1.1 200 OK")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("HTTP/1.1：HTTP协议版本号")])]),t._v(" "),r("li",[r("p",[t._v("200：响应状态码 404 Not Found 500 Internal Server Error")]),t._v(" "),r("p",[t._v("还有一些状态码，参考："),r("a",{attrs:{href:"https://gitee.com/link?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTTP%2FStatus",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("OK：响应状态描述")])])])])]),t._v(" "),r("blockquote",[r("p",[t._v("响应状态码 和 响应字符串 关系是 一一对应 的。")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("响应头")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("Cache-Control")]),t._v(": 缓存控制 private 私有的，只允许客户端缓存数据")]),t._v(" "),r("li",[r("code",[t._v("Connection")]),t._v(": 链接设置")]),t._v(" "),r("li",[r("code",[t._v("Content-Type:text/html;charset=utf-8")]),t._v(": 设置响应体的数据类型以及字符集,响应体为html，字符集utf-8")]),t._v(" "),r("li",[r("code",[t._v("Content-Length")]),t._v(": 响应体的长度，单位为字节")])])]),t._v(" "),r("li",[r("p",[t._v("空行")])]),t._v(" "),r("li",[r("p",[t._v("响应体")]),t._v(" "),r("p",[t._v("响应体内容的类型是非常灵活的，常见的类型有 HTML、CSS、JS、图片、JSON")])])]),t._v(" "),r("h2",{attrs:{id:"创建-http-服务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建-http-服务"}},[t._v("#")]),t._v(" 创建 "),r("strong",[t._v("HTTP")]),t._v(" 服务")]),t._v(" "),r("p",[t._v("使用 nodejs 创建 HTTP 服务")]),t._v(" "),r("h3",{attrs:{id:"操作步骤"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#操作步骤"}},[t._v("#")]),t._v(" 操作步骤")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("//1. 导入 http 模块\nconst http = require('http');\n\n\n//2. 创建服务对象 create 创建 server 服务\n// request 意为请求. 是对请求报文的封装对象, 通过 request 对象可以获得请求报文的数据\n// response 意为响应. 是对响应报文的封装对象, 通过 response 对象可以设置响应报文\nconst server = http.createServer((request, response) => { \t\t\n    // 设置响应体\n    response.end('Hello HTTP server');\n});  //=>返回结果是一个对象\n\n//3. 监听端口, 启动服务\nserver.listen(9000, () => {\n\tconsole.log('服务已经启动, 端口 9000 监听中...');\n});\n")])])]),r("blockquote",[r("p",[r("code",[t._v("http.createServer")]),t._v(" 里的回调函数的执行时机： 当接收到 HTTP 请求的时候，就会执行")])]),t._v(" "),r("h3",{attrs:{id:"测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[t._v("#")]),t._v(" 测试")]),t._v(" "),r("p",[t._v("浏览器请求对应端口")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("http://127.0.0.1:9000\n")])])]),r("h3",{attrs:{id:"注意事项"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("命令行 "),r("code",[t._v("ctrl + c")]),t._v(" 停止服务")])]),t._v(" "),r("li",[r("p",[t._v("当服务启动后，更新代码 必须重启服务才能生效")])]),t._v(" "),r("li",[r("p",[t._v("响应内容中文乱码的解决办法")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 设置响应头\nresponse.setHeader('content-type','text/html;charset=utf-8');\n")])])])]),t._v(" "),r("li",[r("p",[t._v("端口号被占用")]),t._v(" "),r("p",[r("code",[t._v("Error: listen EADDRINUSE: address already in use :::9000")])]),t._v(" "),r("p",[t._v("1）关闭当前正在运行监听端口的服务 （ 使用较多 ）")]),t._v(" "),r("p",[t._v("2）修改其他端口号")])]),t._v(" "),r("li",[r("p",[r("code",[t._v("HTTP")]),t._v(" 协议默认端口是 "),r("code",[t._v("80")]),t._v(" 。"),r("code",[t._v("HTTPS")]),t._v(" 协议的默认端口是 "),r("code",[t._v("443")]),t._v(", HTTP 服务开发常用端口有 "),r("code",[t._v("3000")]),t._v("，"),r("code",[t._v("8080")]),t._v("，"),r("code",[t._v("8090")]),t._v("，"),r("code",[t._v("9000")]),t._v(" 等")])])]),t._v(" "),r("blockquote",[r("p",[t._v("如果端口被其他程序占用，可以使用 资源监视器 找到占用端口的程序，然后使用 任务管理器 关闭对应的程序")])]),t._v(" "),r("h2",{attrs:{id:"浏览器查看-http-报文"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器查看-http-报文"}},[t._v("#")]),t._v(" 浏览器查看 HTTP 报文")]),t._v(" "),r("p",[t._v("点击步骤")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/river-ice/notes/raw/master/%E5%89%8D%E7%AB%AF/nodejs/%E5%B0%9A%E7%A1%85%E8%B0%B7/assets/5e43303dea39359bd3514518f3d5517efac21bd2.jpg",alt:"04_HTTP协议"}})]),t._v(" "),r("h3",{attrs:{id:"查看请求行与请求头"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看请求行与请求头"}},[t._v("#")]),t._v(" 查看请求行与请求头")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/river-ice/notes/raw/master/%E5%89%8D%E7%AB%AF/nodejs/%E5%B0%9A%E7%A1%85%E8%B0%B7/assets/e5062ab2d8edc132beddd35d7cd40c83a8b81c87.jpg",alt:"04_HTTP协议"}})]),t._v(" "),r("h3",{attrs:{id:"查看请求体"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看请求体"}},[t._v("#")]),t._v(" 查看请求体")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/river-ice/notes/raw/master/%E5%89%8D%E7%AB%AF/nodejs/%E5%B0%9A%E7%A1%85%E8%B0%B7/assets/e421f0e1e84c5ec43bcc56f7856c1f7b623b69a5.jpg",alt:"8-2"}})]),t._v(" "),r("h3",{attrs:{id:"查看-url-查询字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看-url-查询字符串"}},[t._v("#")]),t._v(" 查看 "),r("strong",[t._v("URL")]),t._v(" 查询字符串")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/river-ice/notes/raw/master/%E5%89%8D%E7%AB%AF/nodejs/%E5%B0%9A%E7%A1%85%E8%B0%B7/assets/9373dc9437fa52b90d195ed8d76f10e346c8e9e3.jpg",alt:"8-3"}})]),t._v(" "),r("h3",{attrs:{id:"查看响应行与响应头"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看响应行与响应头"}},[t._v("#")]),t._v(" 查看响应行与响应头")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/river-ice/notes/raw/master/%E5%89%8D%E7%AB%AF/nodejs/%E5%B0%9A%E7%A1%85%E8%B0%B7/assets/a553bc93e90d1721bfc27fc960edeeea2eb7ea90.jpg",alt:"8-4"}})]),t._v(" "),r("h3",{attrs:{id:"查看响应体"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看响应体"}},[t._v("#")]),t._v(" 查看响应体")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/river-ice/notes/raw/master/%E5%89%8D%E7%AB%AF/nodejs/%E5%B0%9A%E7%A1%85%E8%B0%B7/assets/a9440ee4a416d06a8f28be8f524c685ccac4c68d.jpg",alt:"8-5"}})]),t._v(" "),r("h2",{attrs:{id:"获取-http-请求报文"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#获取-http-请求报文"}},[t._v("#")]),t._v(" 获取 HTTP 请求报文")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("含义")]),t._v(" "),r("th",[t._v("语法")]),t._v(" "),r("th",[t._v("重点掌握")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("请求方法")]),t._v(" "),r("td",[r("code",[t._v("request.method")])]),t._v(" "),r("td",[t._v("*****")])]),t._v(" "),r("tr",[r("td",[t._v("请求版本")]),t._v(" "),r("td",[t._v("request.httpVersion")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("请求路径")]),t._v(" "),r("td",[r("code",[t._v("request.url")])]),t._v(" "),r("td",[t._v("*****")])]),t._v(" "),r("tr",[r("td",[t._v("URL 路径")]),t._v(" "),r("td",[r("code",[t._v("require('url').parse(request.url).pathname")])]),t._v(" "),r("td",[t._v("*****")])]),t._v(" "),r("tr",[r("td",[t._v("URL 查询字符串")]),t._v(" "),r("td",[r("code",[t._v("require('url').parse(request.url, true).query")])]),t._v(" "),r("td",[t._v("*****")])]),t._v(" "),r("tr",[r("td",[t._v("请求头")]),t._v(" "),r("td",[r("code",[t._v("request.headers")])]),t._v(" "),r("td",[t._v("*****")])]),t._v(" "),r("tr",[r("td",[t._v("请求体")]),t._v(" "),r("td",[t._v("request.on('data', function(chunk){}) request.on('end', function(){})")]),t._v(" "),r("td")])])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 1. 导入 http 模块\nconst http = require('http')\n\n// 2. 创建服务对象\nconst server = http.createServer((request, response) => {\n  // 获取请求的方法\n  console.log(request.method)  //=>GET\n  // 获取请求的 url\n  console.log(request.url)  // 只包含 url 中的 路径 与查询字符串\n  // 获取 http 协议的版本号\n  console.log(request.httpVersion)  //=> 1.1\n  // 获取 http 的请求头\n  console.log(request.headers) //=>结果是一个对象\n  response.end('http') //=>设置响应体\n})\n\n// 3. 监听端口，启动服务\nserver.listen(9000, () => {\n  console.log('服务已经启动...')\n})\n")])])]),r("p",[r("strong",[t._v("注意事项：")])]),t._v(" "),r("ol",[r("li",[r("code",[t._v("request.url")]),t._v(" 只能获取路径以及查询字符串，无法获取 URL 中的域名以及协议的内容")]),t._v(" "),r("li",[r("code",[t._v("request.headers")]),t._v(" 将请求信息转化成一个对象，并将属性名都转化成了『小写』")]),t._v(" "),r("li",[t._v("关于路径：如果访问网站的时候，只填写了 IP 地址或者是域名信息，此时请求的路径为『 "),r("code",[t._v("/")]),t._v(" 』")]),t._v(" "),r("li",[t._v("关于 "),r("code",[t._v("favicon.ico")]),t._v("：这个请求是属于浏览器自动发送的请求")])]),t._v(" "),r("p",[t._v("提取 http 报文的请求体")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 1. 导入 http 模块\nconst http = require('http')\n\n// 2. 创建服务对象\nconst server = http.createServer((request, response) => {\n  // 1. 声明一个变量\n  let body = ''\n  // 2. 绑定 data 事件\n  request.on('data', chunk => {\n    body += chunk\n  })\n  // 3. 绑定 end 事件\n  request.on('end', () => {\n    console.log(body)  //=>'username=111&password=111'\n    // 响应\n    response.end('Hello Http') //=>设置响应体 \n  })\n})\n\n// 3. 监听端口，启动服务\nserver.listen(9000, () => {\n  console.log('服务已经启动...')\n})\n")])])]),r("p",[t._v("提取 http 报文中 url的路径 与 查询字符串")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 导入 http 模块\nconst http = require('http')\n// 1. 导入 url 模块\nconst url = require('url')\n\n// 创建服务对象\nconst server = http.createServer((request, response) => {\n  // 2. 解析 request.url\n  console.log(request.url)   //=>/search?keyword=h5\n  // 使用 parse 解析 request.url 的内容\n  // true 将 query 属性将会设置为一个 对象\n  let res = url.parse(request.url, true)\n  console.log(res)  // 如下图所示，为一个对象\n  // 路径\n  let pathname = res.pathname\n  // 查询字符串\n  let keyword = res.query.keyword\n  console.log(keyword)   //=>h5\n  response.end('url')\n})\n\n// 监听端口，启动服务\nserver.listen(9000, () => {\n  console.log('服务已经启动...')\n})\n")])])]),r("p",[r("img",{attrs:{src:"https://gitee.com/river-ice/notes/raw/master/%E5%89%8D%E7%AB%AF/nodejs/%E5%B0%9A%E7%A1%85%E8%B0%B7/assets/3960e1c84da383ba7dda53b627e1dc68384f2e49.png",alt:"image-20230322162535711"}})]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 导入 http 模块\nconst http = require('http')\n\n// 创建服务对象\nconst server = http.createServer((request, response) => {\n  // 实例化 url 对象\n  // let url = new URL('/search?a=100&b=200','http://127.0.0.1:9000')\n  let url = new URL(request.url, 'http://127.0.0.1')\n  console.log(url)  //=>如图所示，为一个对象\n  // 输出路径\n  console.log(url.pathname)  //=>/search\n  // 输出 keyword 查询字符串\n  console.log(url.searchParams.get('a'))  //=> 100\n  response.end('url new')\n})\n\n// 监听端口，启动服务\nserver.listen(9000, () => {\n  console.log('服务已经启动...')\n})\n")])])]),r("p",[r("img",{attrs:{src:"https://gitee.com/river-ice/notes/raw/master/%E5%89%8D%E7%AB%AF/nodejs/%E5%B0%9A%E7%A1%85%E8%B0%B7/assets/67ddb914c3ae4e0444a8a1fdab0fa2b58d0e3065.png",alt:"image-20230322162034273"}})]),t._v(" "),r("h3",{attrs:{id:"练习"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[t._v("#")]),t._v(" 练习")]),t._v(" "),r("p",[t._v("按照以下要求搭建 HTTP 服务")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("请求类型**("),r("strong",[t._v("方法")]),t._v(")**")]),t._v(" "),r("th",[t._v("请求地址")]),t._v(" "),r("th",[t._v("响应体结果")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("get")]),t._v(" "),r("td",[t._v("/login")]),t._v(" "),r("td",[t._v("登录页面")])]),t._v(" "),r("tr",[r("td",[t._v("get")]),t._v(" "),r("td",[t._v("/reg")]),t._v(" "),r("td",[t._v("注册页面")])])])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('//1、引入http模块\nconst http = require("http");\n\n//2、建立服务\nconst server = http.createServer((request,response)=>{ \n    let {url, method} = request; //对象的解构赋值\n\n\t//设置响应头信息\n\t//解决中文乱码\n\tresponse.setHeader("Content-Type","text/html;charset=utf-8") \n    if(url == "/register" && method == "GET"){\n\t\tresponse.end("注册页面");\n\t}else if(url=="/login" && method == "GET"){\n\t\tresponse.end("登录页面");\n\t}else{\n\t\tresponse.end("<h1>404 Not Found</h1>")\n\t}\n})\n\n//3、监听端口\nserver.listen(8000,()=>{\n\tconsole.log(\'服务启动中....\');\n})\n')])])]),r("h2",{attrs:{id:"设置-http-响应报文"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设置-http-响应报文"}},[t._v("#")]),t._v(" 设置 "),r("strong",[t._v("HTTP")]),t._v(" 响应报文")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("作用")]),t._v(" "),r("th",[t._v("语法")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("设置响应状态码")]),t._v(" "),r("td",[t._v("response.statusCode")])]),t._v(" "),r("tr",[r("td",[t._v("设置响应状态描述")]),t._v(" "),r("td",[t._v("response.statusMessage （ 用的非常少 ）")])]),t._v(" "),r("tr",[r("td",[t._v("设置响应头信息")]),t._v(" "),r("td",[t._v("response.setHeader('头名', '头值')  ("),r("code",[t._v("可以自定义")]),t._v(")")])]),t._v(" "),r("tr",[r("td",[t._v("设置响应体")]),t._v(" "),r("td",[t._v("response.write('xx') response.end('xxx')")])])])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 1. 设置响应状态码\nresponse.statusCode = 203\n// 2. 响应状态的描述\nresponse.statusMessage = 'i love you'\n// 3. 响应头\nresponse.setHeader('content-type', 'text/html;charset=utf-8')\n// 自定义响应头\nresponse.setHeader('myHeader', 'test test')\n// 设置多个同名的响应头\nresponse.setHeader('test', ['a', 'b', 'c'])\n// write 和 end 的两种使用情况：\n// 1. write 和 end 的结合使用 响应体相对分散\nresponse.write('xx');\nresponse.write('xx');\nresponse.write('xx');\nresponse.end(); //每一个请求，在处理的时候必须要执行 end 方法的\n\n//2. 单独使用 end 方法 响应体相对集中\nresponse.end('xxx');\n")])])]),r("h3",{attrs:{id:"练习-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#练习-2"}},[t._v("#")]),t._v(" 练习")]),t._v(" "),r("p",[t._v("搭建 HTTP 服务，响应一个 4 行 3 列的表格，并且要求表格有 "),r("code",[t._v("隔行换色效果")]),t._v(" ，且 "),r("code",[t._v("点击")]),t._v(" 单元格能 "),r("code",[t._v("高亮显示")])]),t._v(" "),r("p",[r("strong",[t._v("方法一")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 导入 http 模块\nconst http = require('http')\nconst fs = require('fs')\n\n// 创建服务对象\nconst server = http.createServer((request, response) => {\n  response.setHeader('content-type', 'text/html;charset=utf-8')\n  response.end(`\n    <!DOCTYPE html>\n    <html lang=\"en\">\n\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Document</title>\n      <style>\n        td {\n          padding: 20px 40px;\n        }\n\n        table tr:nth-child(odd) {\n          background-color: #aef;\n        }\n\n        table tr:nth-child(even) {\n          background-color: #fcb;\n        }\n\n        table,\n        td {\n          border-collapse: collapse;\n        }\n      </style>\n    </head>\n\n    <body>\n      <table border=\"1\">\n        <tr>\n          <td></td>\n          <td></td>\n          <td></td>\n        </tr>\n        <tr>\n          <td></td>\n          <td></td>\n          <td></td>\n        </tr>\n        <tr>\n          <td></td>\n          <td></td>\n          <td></td>\n        </tr>\n        <tr>\n          <td></td>\n          <td></td>\n          <td></td>\n        </tr>\n      </table>\n      <script>\n        const tds = document.querySelectorAll('td')\n        tds.forEach(item => {\n          item.addEventListener('click', function () {\n            this.style.backgroundColor = '#000'\n          })\n        })\n      <\/script>\n    </body>\n\n    </html>\n  `)\n})\n\n// 监听端口，启动服务器\nserver.listen(9000, () => {\n  console.log('服务器已经启动...')\n})\n")])])]),r("p",[t._v("方法二")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 导入 http 模块\nconst http = require('http')\nconst fs = require('fs')\n\n// 创建服务对象\nconst server = http.createServer((request, response) => {\n  response.setHeader('content-type', 'text/html;charset=utf-8')\n  // 读取文件内容\n  let html = fs.readFileSync(__dirname + '/table.html')\n  // end 方法的参数可以是字符串也可以是Buffer\n  response.end(html)\n})\n\n// 监听端口，启动服务器\nserver.listen(9000, () => {\n  console.log('服务器已经启动...')\n})\n")])])]),r("p",[t._v("table.html")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('<!DOCTYPE html>\n<html lang="en">\n\n<head>\n  <meta charset="UTF-8">\n  <meta http-equiv="X-UA-Compatible" content="IE=edge">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Document</title>\n  <style>\n    td {\n      padding: 20px 40px;\n    }\n\n    table tr:nth-child(odd) {\n      background-color: #aef;\n    }\n\n    table tr:nth-child(even) {\n      background-color: #fcb;\n    }\n\n    table,\n    td {\n      border-collapse: collapse;\n    }\n  </style>\n</head>\n\n<body>\n  <table border="1">\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n  </table>\n  <script>\n    const tds = document.querySelectorAll(\'td\')\n    tds.forEach(item => {\n      item.addEventListener(\'click\', function () {\n        this.style.backgroundColor = \'#000\'\n      })\n    })\n  <\/script>\n</body>\n\n</html>\n')])])]),r("h2",{attrs:{id:"网页资源的基本加载过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网页资源的基本加载过程"}},[t._v("#")]),t._v(" 网页资源的基本加载过程")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/river-ice/notes/raw/master/%E5%89%8D%E7%AB%AF/nodejs/%E5%B0%9A%E7%A1%85%E8%B0%B7/assets/929cb3e9fb5f89c7589ee9a7cd93e767ae1a1bc9.jpg",alt:"04_HTTP协议"}})]),t._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/river-ice/notes/raw/master/%E5%89%8D%E7%AB%AF/nodejs/%E5%B0%9A%E7%A1%85%E8%B0%B7/assets/01b27104af8ecfe88afc6f70450cc04682d95f31.jpg",alt:"2"}})]),t._v(" "),r("p",[t._v("网页资源的加载都是循序渐进的，首先获取 HTML 的内容， 然后解析 HTML 在发送其他资源的请求，如 CSS，Javascript，图片等。理解了这个内容对于后续的学习与成长有非常大的帮助")]),t._v(" "),r("h2",{attrs:{id:"静态资源服务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#静态资源服务"}},[t._v("#")]),t._v(" 静态资源服务")]),t._v(" "),r("p",[r("code",[t._v("静态资源")]),t._v(" 是指 内容长时间不发生改变的资源 ，例如图片，视频，CSS 文件，JS文件，HTML文件，字体文件等")]),t._v(" "),r("p",[r("code",[t._v("动态资源")]),t._v(" 是指 内容经常更新的资源 ，例如百度首页，网易首页，京东搜索列表页面等")]),t._v(" "),r("h3",{attrs:{id:"网站根目录或静态资源目录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网站根目录或静态资源目录"}},[t._v("#")]),t._v(" 网站根目录或静态资源目录")]),t._v(" "),r("p",[t._v("HTTP 服务在哪个文件夹中寻找静态资源，那个文件夹就是 静态资源目录 ，也称之为 网站根目录")]),t._v(" "),r("blockquote",[r("p",[t._v("思考：vscode 中使用 live-server 访问 HTML 时， 它启动的服务中网站根目录是谁？")]),t._v(" "),r("ul",[r("li",[t._v("改文件的所处的文件夹")])])]),t._v(" "),r("h3",{attrs:{id:"网页中的-url"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网页中的-url"}},[t._v("#")]),t._v(" 网页中的 "),r("strong",[t._v("URL")])]),t._v(" "),r("p",[t._v("网页中的 URL 主要分为两大类："),r("code",[t._v("相对路径")]),t._v(" 与 "),r("code",[t._v("绝对路径")])]),t._v(" "),r("h4",{attrs:{id:"绝对路径"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#绝对路径"}},[t._v("#")]),t._v(" 绝对路径")]),t._v(" "),r("p",[t._v("绝对路径可靠性强，而且相对容易理解，在项目中运用较多")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("形式")]),t._v(" "),r("th",[t._v("特点")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[r("a",{attrs:{href:"https://gitee.com/link?target=http%3A%2F%2Fatguigu.com%2Fweb",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://atguigu.com/w eb"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("直接向目标资源发送请求，容易理解。网站的外链会用到此形式")])]),t._v(" "),r("tr",[r("td",[t._v("//atguigu.com/web")]),t._v(" "),r("td",[t._v("与页面 URL 的协议拼接形成完整 URL 再发送请求。大型网站用的比较多")])]),t._v(" "),r("tr",[r("td",[t._v("/web")]),t._v(" "),r("td",[t._v("与页面 URL 的协议、主机名、端口拼接形成完整 URL 再发送请求。中小型网站")])])])]),t._v(" "),r("h4",{attrs:{id:"相对路径"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#相对路径"}},[t._v("#")]),t._v(" 相对路径")]),t._v(" "),r("p",[t._v("相对路径在发送请求时，需要与当前页面 URL 路径进行 "),r("code",[t._v("计算")]),t._v(" ，得到完整 URL 后，再发送请求，学习阶段用的较多")]),t._v(" "),r("p",[t._v("例如当前网页 url 为 "),r("a",{attrs:{href:"https://gitee.com/link?target=http%3A%2F%2Fwww.atguigu.com%2Fcourse%2Fh5.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.atguigu.com/course/h5.html"),r("OutboundLink")],1)]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("形式")]),t._v(" "),r("th",[t._v("最终的 "),r("strong",[t._v("URL")])])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("./css/app.css")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gitee.com/link?target=http%3A%2F%2Fwww.atguigu.com%2Fcourse%2Fcss%2Fapp.css",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.atguigu.com/course/css/app.css"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("js/app.js")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gitee.com/link?target=http%3A%2F%2Fwww.atguigu.com%2Fcourse%2Fjs%2Fapp.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.atguigu.com/course/js/app.js"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("../img/logo.png")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gitee.com/link?target=http%3A%2F%2Fwww.atguigu.com%2Fimg%2Flogo.png",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.atguigu.com/img/logo.png"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("../../mp4/show.mp4")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gitee.com/link?target=http%3A%2F%2Fwww.atguigu.com%2Fmp4%2Fshow.mp4",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.atguigu.com/mp4/show.mp4"),r("OutboundLink")],1)])])])]),t._v(" "),r("h4",{attrs:{id:"网页中使用-url-的场景小结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网页中使用-url-的场景小结"}},[t._v("#")]),t._v(" 网页中使用 "),r("strong",[t._v("URL")]),t._v(" 的场景小结")]),t._v(" "),r("p",[t._v("包括但不限于如下场景：")]),t._v(" "),r("ul",[r("li",[t._v("a 标签 href")]),t._v(" "),r("li",[t._v("link 标签 href")]),t._v(" "),r("li",[t._v("script 标签 src")]),t._v(" "),r("li",[t._v("img 标签 src")]),t._v(" "),r("li",[t._v("video audio 标签 src")]),t._v(" "),r("li",[t._v("form 中的 action")]),t._v(" "),r("li",[t._v("AJAX 请求中的 URL")])]),t._v(" "),r("h3",{attrs:{id:"设置资源类型-mime类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设置资源类型-mime类型"}},[t._v("#")]),t._v(" 设置资源类型（"),r("strong",[t._v("mime")]),t._v("类型）")]),t._v(" "),r("p",[r("code",[t._v("媒体类型")]),t._v("（通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型 ）是一种标准，用来表示文档、文件或字节流的性质和格式。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("mime 类型结构： [type]/[subType]\n\n例如： text/html text/css image/jpeg image/png application/json\n")])])]),r("p",[t._v("HTTP 服务可以设置响应头 Content-Type 来表明响应体的 MIME 类型，浏览器会根据该类型决定如何处理资源")]),t._v(" "),r("p",[t._v("下面是常见文件对应的 mime 类型")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("html: 'text/html',\ncss: 'text/css',\njs: 'text/javascript',\npng: 'image/png',\njpg: 'image/jpeg', \ngif: 'image/gif',\nmp4: 'video/mp4',\nmp3: 'audio/mpeg',\njson: 'application/json'\n")])])]),r("blockquote",[r("p",[t._v("对于未知的资源类型，可以选择 "),r("code",[t._v("application/octet-stream")]),t._v(" 类型，浏览器在遇到该类型的响应时，会对响应体内容进行独立存储，也就是我们常见的 "),r("code",[t._v("下载")]),t._v(" 效果")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("require('http').createServer((request,response)=>{\n\t//获取请求的方法已经路径\n\tlet {url,method} = request;\n\t//判断请求方式以及请求路径\n\tif(method == \"GET\" && url == \"/index.html\"){\n\t\t//需要响应文件中的内容\n\t\tlet data = require('fs').readFileSync( dirname + '/index.html');\n         response.end(data);\n\t}else if(method == \"GET\" && url == \"/css/app.css\"){\n\t\t//需要响应文件中的内容\n\t\tlet data = require('fs').readFileSync( dirname + '/public/css/app.css');\n\t\tresponse.end(data);\n\t}else if(method == \"GET\" && url == \"/js/app.js\"){\n\t\t//需要响应文件中的内容\n\t\tlet data = require('fs').readFileSync( dirname + '/public/js/app.js');\n         response.end(data);\n\t}else{\n\t\t//404响应\n         response.statusCode = 404;\n\t\tresponse.end(\"<h1>404 Not Found</h1>\");\n\t}\n}).listen(80,()=>{\n\nconsole.log('80端口正在启动中....');\n\n})\n")])])]),r("p",[t._v("很明显上面的代码，当只要有一个请求路径就需要进行判断，显然这种方式不够完美，那么我们需要封装")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("require('http').createServer((request,response)=>{\n\t//获取请求的方法已经路径\n\tlet {url,method} = request;\n\t//文件夹路径  根路径\n\tlet rootDir = dirname + '/public';\n\t//拼接文件路径\n\tlet filePath = rootDir + url;\n\t//读取文件内容\n    fs.readFile(filePath,(err,data)=>{\n\t\t//判断\n        if(err){\n\t\t\t//如果出现错误，响应404状态码\n            response.statusCode = 404; \n            response.end('<h1>404 Not Found</h1>');\n\t\t}else{\n\t\t\t//响应文件内容\n            response.end(data);\n\t\t}\n\t})\n}).listen(80,()=>{\n\tconsole.log('80端口正在启动中....');\n})\n")])])]),r("h3",{attrs:{id:"get-和-post-请求场景小结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-请求场景小结"}},[t._v("#")]),t._v(" GET "),r("strong",[t._v("和")]),t._v(" POST "),r("strong",[t._v("请求场景小结")])]),t._v(" "),r("p",[t._v("GET 请求的情况：")]),t._v(" "),r("ul",[r("li",[t._v("在地址栏直接输入 url 访问")]),t._v(" "),r("li",[t._v("点击 a 链接")]),t._v(" "),r("li",[t._v("link 标签引入 css")]),t._v(" "),r("li",[t._v("script 标签引入 js")]),t._v(" "),r("li",[t._v("img 标签引入图片")]),t._v(" "),r("li",[t._v("form 标签中的 method 为 get （不区分大小写）")]),t._v(" "),r("li",[t._v("ajax 中的 get 请求")])]),t._v(" "),r("p",[t._v("POST 请求的情况：")]),t._v(" "),r("ul",[r("li",[t._v("form 标签中的 method 为 post（不区分大小写）")]),t._v(" "),r("li",[t._v("AJAX 的 post 请求")])]),t._v(" "),r("h2",{attrs:{id:"get和post请求的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#get和post请求的区别"}},[t._v("#")]),t._v(" "),r("strong",[t._v("GET")]),t._v("和"),r("strong",[t._v("POST")]),t._v("请求的区别")]),t._v(" "),r("p",[r("code",[t._v("GET")]),t._v(" 和 "),r("code",[t._v("POST")]),t._v(" 是 HTTP 协议请求的两种方式。")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("GET")]),t._v(" 主要用来获取数据，"),r("code",[t._v("POST")]),t._v(" 主要用来提交数据")]),t._v(" "),r("li",[r("code",[t._v("GET")]),t._v(" 带参数请求是将参数缀到 URL 之后，在地址栏中输入 url 访问网站就是 GET 请求，"),r("code",[t._v("POST")]),t._v(" 带参数请求是将参数放到请求体中")]),t._v(" "),r("li",[r("code",[t._v("POST")]),t._v(" 请求相对 "),r("code",[t._v("GET")]),t._v(" 安全一些，因为在浏览器中参数会暴露在地址栏")]),t._v(" "),r("li",[r("code",[t._v("GET")]),t._v(" 请求大小有限制，一般为 2K，而 POST 请求则没有")])])])}),[],!1,null,null,null);e.default=n.exports}}]);